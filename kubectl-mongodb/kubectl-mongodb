# kubectl-mongodb
# a kubectl plugin for enterprise mongodb
#!/usr/bin/env python

import sys, os, io
from string import Template
import datetime
import argparse
import requests
import base64 
import json
import copy
from requests.auth import HTTPDigestAuth
import time
import yaml
from kubernetes import client, config
from kubernetes.stream import stream
from os.path import expanduser

KUBECTL_MONGODB_CONF = "%s/.kube/config-mongodb" % expanduser("~")
class MongoDBCloudApi(object):

  V1_API_ENDPOINT = "/api/public/v1.0"

  debug = False
  url = "https://cloud.mongodb.com"
  project = "xxx"
  username = "xxx"
  public_api_key = "xxx"

  def enable_debug(self):
    self.debug = True
  
  def disable_debug(self):
    self.debug = False

  def X__init__(self, config_map_name, secret_name, namespace):
    #url, username, public_api_key,debug=false):
    config.load_kube_config()
    api = client.CoreV1Api()
    config_map = api.read_namespaced_config_map(config_map_name, namespace)
    #print('config_map=%s',config_map)
    if not config_map.data:
      print("ConfigMap '%s' not found" % config_map_name)
      exit(1)
    self.url = config_map.data['baseUrl']
    self.project = config_map.data['projectName']
    secret = api.read_namespaced_secret(secret_name, namespace)
    if not secret.data:
      print("Secret '%s' not found" % secret_name)
      exit(1)
    self.username = base64.b64decode(secret.data['user'])
    self.public_api_key = base64.b64decode(secret.data['publicApiKey'])
    print('self.username=%s, self.public_api_key=%s' % (self.username,self.public_api_key))
    print("self=%s" % self)

  def __init__(self, project_config):
    
    self.url = project_config['baseUrl']
    self.project = project_config['project']
    self.username = project_config['user']
    self.public_api_key = project_config['publicApiKey']
    
  @classmethod
  def print_request(cls,req):
    print('HTTP/1.1 {method} {url}\n{headers}\n\n{body}'.format(
        method=req.method,
        url=req.url,
        headers='\n'.join('{}: {}'.format(k, v) for k, v in req.headers.items()),
        body=req.body,
    ))

  @classmethod
  def print_response(cls,res):
    print('HTTP/1.1 {status_code}\n{headers}\n\n{body}'.format(
        status_code=res.status_code,
        headers='\n'.join('{}: {}'.format(k, v) for k, v in res.headers.items()),
        body=res.content,
    ))

  def __get(self, endpoint, query_string=''):
    if not endpoint.startswith('http'):
      url = "%s%s" % (self.url, endpoint)
    else:
      url = endpoint
    if query_string:
      url += "?%s" % query_string
    if self.debug:
      print("MongoDBCloudApi __get url:%s" % url)
    response = requests.get(url,
                    auth=HTTPDigestAuth(self.username,self.public_api_key))
    if self.debug:
      MongoDBCloudApi.print_request(response.request)
      MongoDBCloudApi.print_response(response)
    response.raise_for_status()
    return response
  
  def __delete(self, endpoint, query_string=''):
    url = "%s%s" % (self.url, endpoint)
    if query_string:
      url += query_string
    response = requests.delete(url,
                    auth=HTTPDigestAuth(self.username,self.public_api_key))
    if self.debug:
      MongoDBCloudApi.print_request(response.request)
      MongoDBCloudApi.print_response(response)
    response.raise_for_status()
    return response
  
  
  def __post(self, endpoint, data):
    url = "%s%s" % (self.url, endpoint)
    headers = { "Content-Type" : "application/json" }
    response = requests.post(url,
                    auth=HTTPDigestAuth(self.username,self.public_api_key),
                    data=json.dumps(data),
                    headers=headers)
    if self.debug:
      MongoDBCloudApi.print_request(response.request)
      MongoDBCloudApi.print_response(response)
    response.raise_for_status()
    return response

  def __put(self, endpoint, data):
    url = "%s%s" % (self.url, endpoint)
    headers = { "Content-Type" : "application/json" }
    response = requests.put(url,
                    auth=HTTPDigestAuth(self.username,self.public_api_key),
                    data=json.dumps(data),
                    headers=headers)
    if self.debug:
      MongoDBCloudApi.print_request(response.request)
      MongoDBCloudApi.print_response(response)
    response.raise_for_status()
    return response

  def get_user_whitelist(self,user_name):
     endpoint = "%s/users/byName/%s" % (self.V1_API_ENDPOINT, user_name)
     user_info = self.__get(endpoint).json()
     endpoint = "%s/users/%s/whitelist" % (self.V1_API_ENDPOINT, user_info['id'])
     response = self.__get(endpoint)
     return response.json()

  def get_automation_configuration(self,project_name):
    group_id = self.get_groupid_by_name(project_name)
    endpoint = "%s/groups/%s/automationConfig" % (self.V1_API_ENDPOINT,group_id)
    r = self.__get(endpoint)
    return r.json()

  def put_automation_configuration(self,project_name,automation_configuration):
    group_id = self.get_groupid_by_name(project_name)
    endpoint = "%s/groups/%s/automationConfig" % (self.V1_API_ENDPOINT,group_id)
    r = self.__put(endpoint,automation_configuration)
    return r.json()

  def get_group_by_name(self, name):
    endpoint = "%s/groups/byName/%s" % (self.V1_API_ENDPOINT, name)
    r = self.__get(endpoint)
    return r.json()

  def get_groupid_by_name(self,name):
    group = self.get_group_by_name(name)
    return group['id']

  def delete_group(self, group_id):
    endpoint = "%s/groups/%s" % (self.V1_API_ENDPOINT, group_id)
    r = self__delete(endpoint)
    return r.json()

  def delete_org(self, org_id):
    endpoint = "%s/orgs/%s" % (self.V1_API_ENDPOINT, group_id)
    r = self__delete(endpoint)
    return r.json()


  """Return true if this Cloud API endpoint is OK"""
  def OK(self):
    return true

  def GET(self,endpoint,query_string=""):
    if not endpoint.startswith('http'):
      endpoint = "%s/%s" % (self.V1_API_ENDPOINT, endpoint)
    print("GET endpoint:%s" % endpoint)
    r = self.__get(endpoint,query_string)
    return r.json()
    

class KubectlMongoDB(object):

  PLUGIN_DEFAULT_K8S_OBJECT_NAME_TEMPLATE = "mongodb-$name-$type"
  def get_k8s_object_name(self,name,type):
    t = Template(KubectlMongoDB.PLUGIN_DEFAULT_K8S_OBJECT_NAME_TEMPLATE)
    return t.substitute(name=name,type=type)

  def __get_cloud_api(self,project):
    #config_map = self.get_k8s_object_name(project['project'],"config-map")     
    #secret = self.get_k8s_object_name(project['project'],"secret")     
    print("__get_cloud_api project='%s'" % project)
    api = MongoDBCloudApi(project)
    #api = MongoDBCloudApi(config_map,secret,project['namespace']) 
    return api

  def clean_up_atlas_projects(self):
    desc="""Manage CloudMgr/Atlas groups"""
    args = self.__get_args(desc, [ "--project", "--projectNameFilter" ])
    project = self.__get_config_project(args.project)
    api = self.__get_cloud_api(project)
    print('projectNameFilter=%s' % args.projectNameFilter)
    #api.enable_debug()
    # loop through all groups for the user which match filter
    # for each delete the group/project, then attempt to delete the parent
    # org, which will fail if there are other projects in the org, which is ok
    groups = api.GET("groups","itemsPerPage=500")
    while groups:
      for group in groups['results']:
        if not group['name']:
          #print("Got empty group name, skipping...")
          continue
        if not group['name'].startswith(args.projectNameFilter):
          #print("Skipping group '%s', does not match filter '%s'" % (group['name'],args.projectNameFilter))
          continue
        print("About to delete group %s id:%s" % (group['name'], group['id']))
        #response = api.delete_group(group['id'])
        #print("delete-group - response: %s" % response)
        print("About to delete org id:%s" % (group['orgId']))
        #response = api.delete_org(group['orgId'])
        #print("delete-group - response: %s" % response)
      next_url = [h for h in groups['links'] if h['rel'] == 'next']
      print("got next_url:%s" % next_url)
      if next_url[0]:
        href = next_url[0]['href']
        print("href:%s" % href)
        groups = api.GET(href)
      else:
        group = "" 
    
  def whitelist(self):
    desc="""Manage user ip whitelist for Cloud manager"""
    args = self.__get_args(desc, [ "command", "--project" ])
    project = self.__get_config_project(args.project)
    api = self.__get_cloud_api(project)
    print('project=%s' % project)
    api.enable_debug()

    if args.command == 'list':
      response = api.get_user_whitelist(project['user'])
      print('response=%s' % response)


  def project(self):
    desc="""Dump out the automation config for the project"""
    args = self.__get_args(desc, [ "command", "--project" ])

    project = self.__get_config_project(args.project)
    api = self.__get_cloud_api(project)
    print('project=%s' % project)
    api.enable_debug()
    response = api.get_automation_configuration(project['project'])
    print('processes:%s' % response['processes'])
    print('keys:%s' % response.keys())
    print('roles:%s' % response['roles'])
    print('auth:%s' % response['auth'])
    print('ssl:%s' % response['ssl'])

  def authn(self):
    desc="""Manage authentication settings for a MongoDB deployment running
on Kubernetes. This is accomplished through the related MDB Private Cloud
'Project' and the automation agent configuration.
Command supported:
list         - Output the current authentication settings
add          - Add user(s), optional supply yaml file with user via --filename
               Requires either --filename or --user, --db, --password, --roles
               where --roles is a comma-delimited string of <role_name>@<db_name>
               roles.
delete       - Delete a user(s)
passwd	     - Change a users password
"""
    args = self.__get_args(desc, [ "command", "--project", "--user","--password","--roles","--db","B--force"] )
    if not args.project:
      raise ValueError("the --project <project_name> flag is required")
    project = self.__get_config_project(args.project)
    api = self.__get_cloud_api(project)
    api.enable_debug()

    grp = api.get_group_by_name(args.project)
    print("grp=%s" % grp)
    auto_conf= api.get_automation_configuration(project['project'])
    if args.command == "list":
      print("list")
      print('processes:%s' % auto_conf['processes'])
      print('keys:%s' % auto_conf.keys())
      print('roles:%s' % auto_conf['roles'])
      print('auth:%s' % auto_conf['auth'])
      print('ssl:%s' % auto_conf['ssl'])

    if args.command == "disable":
      print("disable - disable user/pwd authentication for a project")
      if auto_conf['auth']['disabled'] == True:
        print("Authentication is already disabled for project '%s'" % project['project'])
        if not args.force:
          raise SystemExit()
        else:
          print("--force was true, attemping disable")
      auto_conf['auth']['disabled'] = False
      #auto_conf['auth']['key']=''
      #auto_conf['auth']['keyfile']=''
      auto_conf['auth']['usersWanted'] = []
      auto_conf['auth']['usersDeleted'] = [
          { "user" : "mms-monitoring-agent", "dbs" : [ 'admin' ] },
          { "user" : "mms-backup-agent", "dbs" : [ 'admin','local' ] }

      ]
      print('auth:%s' % auto_conf['auth'])
      response = api.put_automation_configuration(project['project'],auto_conf)
      print('response:%s' % response)

    if args.command == "enable":
      print("enable - enable user/pwd authentication for a project")
      if auto_conf['auth']['disabled'] == False:
        print("Authentication is alreday enabled for project '%s'" % project['project'])
        raise SystemExit()
        
      auto_conf['auth']['disabled'] = False
      key = "mongo-on-kubernetes-rules" 
      key_file = "/mongodb-automation/mongo_om.key"
      auto_conf['auth']['key']=key
      auto_conf['auth']['keyfile']=key_file
      # add mms-monitoring-agent
      gen_pwd = "mongo-on-kubernetes-rules"
      user = { "user" : "mms-monitoring-agent", "db" : "admin", "initPwd" : gen_pwd }
      user['roles']=[ { "role" : 'clusterMonitor', "db" : 'admin' } ]
      auto_conf['auth']['usersWanted'].append(user)

      user = { "user" : "mms-backup-agent", "db" : "admin", "initPwd" : gen_pwd }
      user['roles']=[ 
           { "role" : 'clusterAdmin', "db" : 'admin' }
         , { "role" : 'readWriteAnyDatabase', "db" : 'admin' }
      ]
      auto_conf['auth']['usersWanted'].append(user)
      
      print('auth:%s' % auto_conf['auth'])
      response = api.put_automation_configuration(project['project'],auto_conf)
      print('response:%s' % response)

    if args.command == "add":
      print("create - not implemented yet.")
      user = { "user" : args.user, "db" : args.db, "initPwd" : args.password }
      roles = []
      arg_roles = args.roles.split(',')
      # the following comprehension does it faster but not good for errors
      #arg_roles = [ role.split('@') for role in roles.split(',') ]
      for role in arg_roles:
        r = role.split('@')
        if not len(r)==2:
          raise ValueError("Invalid --roles %s (Check '%s') detected, please check and try again" % (args.roles,role))
        roles.append( { "role" : r[0], "db" : r[1] } )
      user['roles']=roles
      auto_conf['auth']['usersWanted'].append(user)
      print('auth:%s' % auto_conf['auth'])
      response = api.put_automation_configuration(project['project'],auto_conf)
      print('response:%s' % response)

    if args.command == "delete":
			print("delete - not implemented yet.")

    if args.command == "passwd":
			print("passwd - not implemented yet.")




  def shell(self):
    #print("shell command")
    desc="""Start a Mongo shell. Call with eval, like\n 
$eval $(kubectl mongodb shell --service my-replica-set-svc)
"""
    args = self.__get_args(desc, [ '--service', '--namespace', '--srv'])
    # find first pod, run kubectl exec to mongo shell but pass internal mongodb+srv 
    if not args.namespace:
      namespace = 'mongodb'
    else:
      namespace = args.namespace 
    # look up the app label on this service
    #kubectl get service args.service -o=jsonpath='{.metadata.labels.app}'    
    config.load_kube_config()
    api = client.CoreV1Api()
    response = api.read_namespaced_service(args.service, namespace)
    if not (response.metadata):
      print("No service named '%s' found" % (args.service))
      raise SystemExit()
    # service is 'owned' by mdb deployment, lookup name
    #print(response)
    owner_type = response.metadata.owner_references[0].kind
    if owner_type == 'MongoDbReplicaSet':
      replica_set_name = response.metadata.owner_references[0].name

    #print("app=%s" % response.metadata.labels['app'])
    label_selector = 'app=%s' % response.metadata.labels['app']
    response = api.list_namespaced_pod(namespace, label_selector=label_selector)
    pod_name = ''
    # TODO: discover the full path to mongo shell binary
    mongo = "/var/lib/mongodb-mms-automation/mongodb-linux-x86_64-4.0.0/bin/mongo"
    if not len(response.items) > 0:
      print("No pods for service '%s' with label '%s' found" % (args.service, label_selector))
      raise SystemExit()
    else:
      # Run the mongo shell from the first pod in the deployment
      pod_name = response.items[0].metadata.name

      if args.srv:
         connection_string = "mongodb+srv://%s/test?ssl=false" % (args.service)
      else:
         hosts = ','.join( [ item.metadata.name for item in response.items ])
         connection_string = "mongodb://%s/test?ssl=false" % (hosts)
    if owner_type == 'MongoDbReplicaSet':
      connection_string = '%s&replicaSet=%s' % (connection_string, replica_set_name)
    #print("pod_name=%s" % pod_name)

    cmd = "kubectl exec -it %s -- %s \"%s\"" % (pod_name, mongo, connection_string)
    print('%s' % cmd)
    #if args.i:
    #  self.__i_shell(api,pod_name, mongo, connection_string)

  def __i_shell(self,api,pod_name, mongo, connection_string):
    resp = stream(api.connect_get_namespaced_pod_exec, pod_name, 'default',
              command='%s "%s"' % (mongo, connection_string),
              stderr=True, stdin=True,
              stdout=True, tty=False,
              _preload_content=False)
    while resp.is_open():
      resp.update(timeout=1)
      if resp.peek_stdout():
        print("STDOUT: %s" % resp.read_stdout())
      if resp.peek_stderr():
        print("STDERR: %s" % resp.read_stderr())
      if commands:
        c = commands.pop(0)
        print("Running command... %s\n" % c)
        resp.write_stdin(c + "\n")
      else:
        break

  def operator(self):
    # read the .kubectl-mongodb
    desc = """operator commands - config|install
#Output ConfigMap and Secret to be used by project 'foobar'
$kubectl mongodb operator config --project foobar

$kubectl mongodb operator install --namespace <namespace>
"""
    args = self.__get_args(desc, [ 'command', '--project' ] )
    if args.command=="install":
      print("install not implemented yet")
      exit(1)
   
    if not args.command=="config":
      print("Unknown command '%s'" % args.command)
      exit(1)

    # only config command from here
    if not args.project:
      print("--project parameter is required")
      exit(1)
    cp = self.__get_config_project(args.project)
    config_map_name = self.get_k8s_object_name(cp['project'],"config-map")     
    secret_name = self.get_k8s_object_name(cp['project'],"secret")     
    
    config_map="""---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {config_map_name}
data:
  projectName: {project}
  baseUrl: {baseUrl}"""
    secret="""---
apiVersion: v1
kind: Secret
metadata:
  name: {secret_name}
type: Opaque
stringData:
  user: {user}
  publicApiKey: {publicApiKey}"""

    print( config_map.format(config_map_name=config_map_name,project=cp['project'],baseUrl=cp['baseUrl']) )
    print( secret.format(secret_name=secret_name,project=cp['project'], user=cp['user'], publicApiKey=cp['publicApiKey']) )
    

  def __get_config(self):
    config = {}
    with io.open(KUBECTL_MONGODB_CONF, 'r', encoding='utf8') as f:
      config = yaml.load(f)
    return config

  def __get_config_project(self,project_name):
    config = self.__get_config()
    projects = config['projects']
    p = [d for d in projects if d['project'] == project_name]
    if len(p)>0:
      return p[0]
    else:
      raise ValueError("Unable to find project '%s' in %s" % (project,KUBECTL_MONGODB_CONF)) 

  def config(self):

    #print("configcommand")
    args = self.__get_args('Configure user & publicApiKey', [ 'command', '--user', '--publicApiKey', '--project', '--baseUrl', '--namespace']) 
    #print 'user=%s, publicApiKey=%s' % (args.user, args.publicApiKey)

    if not os.path.exists(KUBECTL_MONGODB_CONF):
      config = { "apiVersion" : "v1", "projects" : [] }
      #print('config=%s' % config)      
      # Write YAML file
      with io.open(KUBECTL_MONGODB_CONF, 'w+', encoding='utf8') as outfile:
        #yaml.dump(config, outfile, default_flow_style=False, allow_unicode=True)
        yaml.dump(config, outfile, default_flow_style=False)
    
    config = self.__get_config()
 
    #print("config=%s" % config) 
    # dump out file
    if args.command == 'get':
      print yaml.dump(config)
    
    # load up config file yaml, inject new project or update & save
    if args.command == 'set':
      project = { 
        "project" : args.project,
        "namespace" : args.namespace,
        "user" : args.user,
        "publicApiKey" : args.publicApiKey,
        "baseUrl" : args.baseUrl
      }

      # validate and warn if this project isn't valid or no active anymore
      # this will prevent issues when trying to deploy      
      api = self.__get_cloud_api(project)
      # remove this project if it's there
      for existing_project in config['projects']:
        if existing_project['project'] == project['project']:
          config['projects'] = [x for x in config['projects'] if not (args.project == x.get('project'))]
      # add this project
      config['projects'].append(project)  
      with io.open(KUBECTL_MONGODB_CONF, 'w', encoding='utf8') as f:
        yaml.dump(config, f, default_flow_style=False)
      

  def help(self):
    print("help")

  def __get_args(self, description, args):
    parser = argparse.ArgumentParser(
            description=description,formatter_class=argparse.RawTextHelpFormatter)
    # prefixing the argument with -- means it's optional
    for arg in args:
      if arg[0]=='B':
        parser.add_argument(arg[1:],action='store_true')
      else:
        parser.add_argument(arg)
    # now that we're inside a subcommand, ignore the first
    # TWO argvs, ie the command (git) and the subcommand (commit)
    args = parser.parse_args(sys.argv[2:])
    return args

  # "main"
  def __init__(self):
    description="""
kubectl-mongodb

A kubectl plugin which implements various utilies
to provision, configure, and manage MongoDB deployments
in a Kubernetes cluster and MongoDB Cloud Manager


Usage: {filename} <subcommand> <arg1 arg2 arg3...>

Available subcommands:

- config <get|set>
  Stores MongoDB Ops/Cloud Manager baseUrl, user, public api key, and project/group name into
  the plugin configuration file: ./.kubectl.mongodb
  Reference a particular configuration with the --project <project_name> flag to other
  commands.
- projects <list|create>
- operator <config|>
- shell <service name>
  Connects to and starts a mongo shell session with a target
  service name.
"""

    parser = argparse.ArgumentParser(
               description=description,formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('command', help='Subcommand to run')
    # parse_args defaults to [1:] for args, but you need to
    # exclude the rest of the args too, or validation will fail
    args = parser.parse_args(sys.argv[1:2])
    if not hasattr(self, args.command):
      print 'Unrecognized command'
      parser.print_help()
      exit(1)
    # use dispatch pattern to invoke method with same name
    getattr(self, args.command)()


if __name__ == '__main__':
    KubectlMongoDB()
